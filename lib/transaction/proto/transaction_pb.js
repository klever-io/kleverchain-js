// source: lib/transaction/proto/transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.proto.TXContract', null, global);
goog.exportSymbol('proto.proto.TXContract.ContractType', null, global);
goog.exportSymbol('proto.proto.Transaction', null, global);
goog.exportSymbol('proto.proto.Transaction.Raw', null, global);
goog.exportSymbol('proto.proto.Transaction.Receipt', null, global);
goog.exportSymbol('proto.proto.Transaction.TXResult', null, global);
goog.exportSymbol('proto.proto.Transaction.TXResultCode', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TXContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TXContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TXContract.displayName = 'proto.proto.TXContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Transaction.repeatedFields_, null);
};
goog.inherits(proto.proto.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Transaction.displayName = 'proto.proto.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Transaction.Raw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Transaction.Raw.repeatedFields_, null);
};
goog.inherits(proto.proto.Transaction.Raw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Transaction.Raw.displayName = 'proto.proto.Transaction.Raw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Transaction.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Transaction.Receipt.repeatedFields_, null);
};
goog.inherits(proto.proto.Transaction.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Transaction.Receipt.displayName = 'proto.proto.Transaction.Receipt';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TXContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TXContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TXContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TXContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parameter: (f = msg.getParameter()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TXContract}
 */
proto.proto.TXContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TXContract;
  return proto.proto.TXContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TXContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TXContract}
 */
proto.proto.TXContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.TXContract.ContractType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setParameter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TXContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TXContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TXContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TXContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getParameter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.TXContract.ContractType = {
  TRANSFERCONTRACTTYPE: 0,
  CREATEASSETCONTRACTTYPE: 1,
  CREATEVALIDATORCONTRACTTYPE: 2,
  VALIDATORCONFIGCONTRACTTYPE: 3,
  FREEZECONTRACTTYPE: 4,
  UNFREEZECONTRACTTYPE: 5,
  DELEGATECONTRACTTYPE: 6,
  UNDELEGATECONTRACTTYPE: 7,
  WITHDRAWCONTRACTTYPE: 8,
  CLAIMCONTRACTTYPE: 9,
  UNJAILCONTRACTTYPE: 10,
  ASSETTRIGGERCONTRACTTYPE: 11,
  SETACCOUNTNAMECONTRACTTYPE: 12,
  PROPOSALCONTRACTTYPE: 13,
  VOTECONTRACTTYPE: 14,
  CONFIGITOCONTRACTTYPE: 15,
  SETITOPRICESCONTRACTTYPE: 16,
  BUYCONTRACTTYPE: 17,
  SELLCONTRACTTYPE: 18,
  CANCELMARKETORDERCONTRACTTYPE: 19,
  CREATEMARKETPLACECONTRACTTYPE: 20,
  CONFIGMARKETPLACECONTRACTTYPE: 21,
  UPDATEACCOUNTPERMISSIONCONTRACTTYPE: 22
};

/**
 * optional ContractType Type = 1;
 * @return {!proto.proto.TXContract.ContractType}
 */
proto.proto.TXContract.prototype.getType = function() {
  return /** @type {!proto.proto.TXContract.ContractType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.TXContract.ContractType} value
 * @return {!proto.proto.TXContract} returns this
 */
proto.proto.TXContract.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Any Parameter = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.proto.TXContract.prototype.getParameter = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.proto.TXContract} returns this
*/
proto.proto.TXContract.prototype.setParameter = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TXContract} returns this
 */
proto.proto.TXContract.prototype.clearParameter = function() {
  return this.setParameter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TXContract.prototype.hasParameter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Transaction.repeatedFields_ = [2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawdata: (f = msg.getRawdata()) && proto.proto.Transaction.Raw.toObject(includeInstance, f),
    signatureList: msg.getSignatureList_asB64(),
    result: jspb.Message.getFieldWithDefault(msg, 3, 0),
    resultcode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    receiptsList: jspb.Message.toObjectList(msg.getReceiptsList(),
    proto.proto.Transaction.Receipt.toObject, includeInstance),
    block: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Transaction}
 */
proto.proto.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Transaction;
  return proto.proto.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Transaction}
 */
proto.proto.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Transaction.Raw;
      reader.readMessage(value,proto.proto.Transaction.Raw.deserializeBinaryFromReader);
      msg.setRawdata(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSignature(value);
      break;
    case 3:
      var value = /** @type {!proto.proto.Transaction.TXResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 4:
      var value = /** @type {!proto.proto.Transaction.TXResultCode} */ (reader.readEnum());
      msg.setResultcode(value);
      break;
    case 5:
      var value = new proto.proto.Transaction.Receipt;
      reader.readMessage(value,proto.proto.Transaction.Receipt.deserializeBinaryFromReader);
      msg.addReceipts(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawdata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Transaction.Raw.serializeBinaryToWriter
    );
  }
  f = message.getSignatureList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getResultcode();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getReceiptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.Transaction.Receipt.serializeBinaryToWriter
    );
  }
  f = message.getBlock();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.Transaction.TXResult = {
  SUCCESS: 0,
  FAILED: 1
};

/**
 * @enum {number}
 */
proto.proto.Transaction.TXResultCode = {
  OK: 0,
  OUTOFFUNDS: 1,
  ACCOUNTERROR: 2,
  ASSETERROR: 3,
  CONTRACTINVALID: 4,
  CONTRACTNOTFOUND: 5,
  FEEINVALID: 6,
  PARAMETERINVALID: 7,
  APRINVALID: 8,
  ASSETIDINVALID: 9,
  ASSETTYPEINVALID: 10,
  ASSETCANTBEMINTED: 11,
  ASSETCANTBEBURNED: 12,
  ASSETCANTBEPAUSED: 13,
  ASSETCANTBEDELEGATED: 14,
  ASSETOWNERCANTBECHANGED: 15,
  ACCOUNTNOTOWNER: 16,
  COMMISSIONTOOHIGH: 17,
  DELEGATIONAMOUNTINVALID: 18,
  PROPOSALNOTACTIVE: 19,
  VALUEINVALID: 20,
  AMOUNTINVALID: 21,
  BUCKETIDINVALID: 22,
  KEYCONFLICT: 23,
  MAXDELEGATIONAMOUNT: 24,
  INVALIDPEERKEY: 25,
  MINKFISTAKEDUNREACHED: 26,
  MAXSUPPLYEXEECED: 27,
  SAVEACCOUNTERROR: 28,
  LOADACCOUNTERROR: 29,
  SAMEACCOUNTERROR: 30,
  ASSETPAUSED: 31,
  DELETEGATEERROR: 32,
  WITHDRAWNOTAVAILABLE: 33,
  ERROVERFLOW: 34,
  SETSTAKINGERR: 35,
  SETMARKETORDERERR: 36,
  BALANCEERROR: 37,
  KAPPERROR: 38,
  UNFREEZEERROR: 39,
  UNDELETEGATEERROR: 40,
  WITHDRAWERROR: 41,
  CLAIMERROR: 42,
  BUCKETSEXCEDED: 43,
  ASSETCANTBEWIPED: 44,
  ASSETCANTADDROLES: 45,
  FREEZEERROR: 46,
  FAIL: 99
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Transaction.Raw.repeatedFields_ = [6,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Transaction.Raw.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Transaction.Raw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Transaction.Raw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Transaction.Raw.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sender: msg.getSender_asB64(),
    contractList: jspb.Message.toObjectList(msg.getContractList(),
    proto.proto.TXContract.toObject, includeInstance),
    permissionid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    dataList: msg.getDataList_asB64(),
    kappfee: jspb.Message.getFieldWithDefault(msg, 13, 0),
    bandwidthfee: jspb.Message.getFieldWithDefault(msg, 14, 0),
    version: jspb.Message.getFieldWithDefault(msg, 15, 0),
    chainid: msg.getChainid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Transaction.Raw}
 */
proto.proto.Transaction.Raw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Transaction.Raw;
  return proto.proto.Transaction.Raw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Transaction.Raw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Transaction.Raw}
 */
proto.proto.Transaction.Raw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSender(value);
      break;
    case 6:
      var value = new proto.proto.TXContract;
      reader.readMessage(value,proto.proto.TXContract.deserializeBinaryFromReader);
      msg.addContract(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPermissionid(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addData(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setKappfee(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBandwidthfee(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Transaction.Raw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Transaction.Raw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Transaction.Raw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Transaction.Raw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getContractList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.proto.TXContract.serializeBinaryToWriter
    );
  }
  f = message.getPermissionid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getDataList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      10,
      f
    );
  }
  f = message.getKappfee();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getBandwidthfee();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getChainid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
};


/**
 * optional uint64 Nonce = 1;
 * @return {number}
 */
proto.proto.Transaction.Raw.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Transaction.Raw} returns this
 */
proto.proto.Transaction.Raw.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes Sender = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Transaction.Raw.prototype.getSender = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Sender = 2;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.proto.Transaction.Raw.prototype.getSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSender()));
};


/**
 * optional bytes Sender = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.proto.Transaction.Raw.prototype.getSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSender()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Transaction.Raw} returns this
 */
proto.proto.Transaction.Raw.prototype.setSender = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated TXContract Contract = 6;
 * @return {!Array<!proto.proto.TXContract>}
 */
proto.proto.Transaction.Raw.prototype.getContractList = function() {
  return /** @type{!Array<!proto.proto.TXContract>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.TXContract, 6));
};


/**
 * @param {!Array<!proto.proto.TXContract>} value
 * @return {!proto.proto.Transaction.Raw} returns this
*/
proto.proto.Transaction.Raw.prototype.setContractList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.proto.TXContract=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.TXContract}
 */
proto.proto.Transaction.Raw.prototype.addContract = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.proto.TXContract, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Transaction.Raw} returns this
 */
proto.proto.Transaction.Raw.prototype.clearContractList = function() {
  return this.setContractList([]);
};


/**
 * optional int32 PermissionID = 7;
 * @return {number}
 */
proto.proto.Transaction.Raw.prototype.getPermissionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Transaction.Raw} returns this
 */
proto.proto.Transaction.Raw.prototype.setPermissionid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated bytes Data = 10;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.proto.Transaction.Raw.prototype.getDataList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * repeated bytes Data = 10;
 * This is a type-conversion wrapper around `getDataList()`
 * @return {!Array<string>}
 */
proto.proto.Transaction.Raw.prototype.getDataList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getDataList()));
};


/**
 * repeated bytes Data = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataList()`
 * @return {!Array<!Uint8Array>}
 */
proto.proto.Transaction.Raw.prototype.getDataList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getDataList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.proto.Transaction.Raw} returns this
 */
proto.proto.Transaction.Raw.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.proto.Transaction.Raw} returns this
 */
proto.proto.Transaction.Raw.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Transaction.Raw} returns this
 */
proto.proto.Transaction.Raw.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional int64 KAppFee = 13;
 * @return {number}
 */
proto.proto.Transaction.Raw.prototype.getKappfee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Transaction.Raw} returns this
 */
proto.proto.Transaction.Raw.prototype.setKappfee = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 BandwidthFee = 14;
 * @return {number}
 */
proto.proto.Transaction.Raw.prototype.getBandwidthfee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Transaction.Raw} returns this
 */
proto.proto.Transaction.Raw.prototype.setBandwidthfee = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint32 Version = 15;
 * @return {number}
 */
proto.proto.Transaction.Raw.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Transaction.Raw} returns this
 */
proto.proto.Transaction.Raw.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bytes ChainID = 16;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Transaction.Raw.prototype.getChainid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes ChainID = 16;
 * This is a type-conversion wrapper around `getChainid()`
 * @return {string}
 */
proto.proto.Transaction.Raw.prototype.getChainid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainid()));
};


/**
 * optional bytes ChainID = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainid()`
 * @return {!Uint8Array}
 */
proto.proto.Transaction.Raw.prototype.getChainid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Transaction.Raw} returns this
 */
proto.proto.Transaction.Raw.prototype.setChainid = function(value) {
  return jspb.Message.setProto3BytesField(this, 16, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Transaction.Receipt.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Transaction.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Transaction.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Transaction.Receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Transaction.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: msg.getDataList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Transaction.Receipt}
 */
proto.proto.Transaction.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Transaction.Receipt;
  return proto.proto.Transaction.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Transaction.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Transaction.Receipt}
 */
proto.proto.Transaction.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Transaction.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Transaction.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Transaction.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Transaction.Receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes Data = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.proto.Transaction.Receipt.prototype.getDataList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes Data = 1;
 * This is a type-conversion wrapper around `getDataList()`
 * @return {!Array<string>}
 */
proto.proto.Transaction.Receipt.prototype.getDataList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getDataList()));
};


/**
 * repeated bytes Data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataList()`
 * @return {!Array<!Uint8Array>}
 */
proto.proto.Transaction.Receipt.prototype.getDataList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getDataList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.proto.Transaction.Receipt} returns this
 */
proto.proto.Transaction.Receipt.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.proto.Transaction.Receipt} returns this
 */
proto.proto.Transaction.Receipt.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Transaction.Receipt} returns this
 */
proto.proto.Transaction.Receipt.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional Raw RawData = 1;
 * @return {?proto.proto.Transaction.Raw}
 */
proto.proto.Transaction.prototype.getRawdata = function() {
  return /** @type{?proto.proto.Transaction.Raw} */ (
    jspb.Message.getWrapperField(this, proto.proto.Transaction.Raw, 1));
};


/**
 * @param {?proto.proto.Transaction.Raw|undefined} value
 * @return {!proto.proto.Transaction} returns this
*/
proto.proto.Transaction.prototype.setRawdata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Transaction} returns this
 */
proto.proto.Transaction.prototype.clearRawdata = function() {
  return this.setRawdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Transaction.prototype.hasRawdata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated bytes Signature = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.proto.Transaction.prototype.getSignatureList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes Signature = 2;
 * This is a type-conversion wrapper around `getSignatureList()`
 * @return {!Array<string>}
 */
proto.proto.Transaction.prototype.getSignatureList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSignatureList()));
};


/**
 * repeated bytes Signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignatureList()`
 * @return {!Array<!Uint8Array>}
 */
proto.proto.Transaction.prototype.getSignatureList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSignatureList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.proto.Transaction} returns this
 */
proto.proto.Transaction.prototype.setSignatureList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.proto.Transaction} returns this
 */
proto.proto.Transaction.prototype.addSignature = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Transaction} returns this
 */
proto.proto.Transaction.prototype.clearSignatureList = function() {
  return this.setSignatureList([]);
};


/**
 * optional TXResult Result = 3;
 * @return {!proto.proto.Transaction.TXResult}
 */
proto.proto.Transaction.prototype.getResult = function() {
  return /** @type {!proto.proto.Transaction.TXResult} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.proto.Transaction.TXResult} value
 * @return {!proto.proto.Transaction} returns this
 */
proto.proto.Transaction.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional TXResultCode ResultCode = 4;
 * @return {!proto.proto.Transaction.TXResultCode}
 */
proto.proto.Transaction.prototype.getResultcode = function() {
  return /** @type {!proto.proto.Transaction.TXResultCode} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.proto.Transaction.TXResultCode} value
 * @return {!proto.proto.Transaction} returns this
 */
proto.proto.Transaction.prototype.setResultcode = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * repeated Receipt Receipts = 5;
 * @return {!Array<!proto.proto.Transaction.Receipt>}
 */
proto.proto.Transaction.prototype.getReceiptsList = function() {
  return /** @type{!Array<!proto.proto.Transaction.Receipt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Transaction.Receipt, 5));
};


/**
 * @param {!Array<!proto.proto.Transaction.Receipt>} value
 * @return {!proto.proto.Transaction} returns this
*/
proto.proto.Transaction.prototype.setReceiptsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.Transaction.Receipt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Transaction.Receipt}
 */
proto.proto.Transaction.prototype.addReceipts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.Transaction.Receipt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Transaction} returns this
 */
proto.proto.Transaction.prototype.clearReceiptsList = function() {
  return this.setReceiptsList([]);
};


/**
 * optional uint64 Block = 6;
 * @return {number}
 */
proto.proto.Transaction.prototype.getBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Transaction} returns this
 */
proto.proto.Transaction.prototype.setBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


goog.object.extend(exports, proto.proto);
