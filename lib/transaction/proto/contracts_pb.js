// source: lib/transaction/proto/contracts.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.proto.AccKey', null, global);
goog.exportSymbol('proto.proto.AccPermission', null, global);
goog.exportSymbol('proto.proto.AccPermission.AccPermissionType', null, global);
goog.exportSymbol('proto.proto.AssetTriggerContract', null, global);
goog.exportSymbol('proto.proto.AssetTriggerContract.EnumTriggerType', null, global);
goog.exportSymbol('proto.proto.AttributesInfo', null, global);
goog.exportSymbol('proto.proto.BuyContract', null, global);
goog.exportSymbol('proto.proto.BuyContract.EnumBuyType', null, global);
goog.exportSymbol('proto.proto.CancelMarketOrderContract', null, global);
goog.exportSymbol('proto.proto.ClaimContract', null, global);
goog.exportSymbol('proto.proto.ClaimContract.EnumClaimType', null, global);
goog.exportSymbol('proto.proto.ConfigITOContract', null, global);
goog.exportSymbol('proto.proto.ConfigITOContract.EnumITOStatus', null, global);
goog.exportSymbol('proto.proto.ConfigMarketplaceContract', null, global);
goog.exportSymbol('proto.proto.CreateAssetContract', null, global);
goog.exportSymbol('proto.proto.CreateAssetContract.EnumAssetType', null, global);
goog.exportSymbol('proto.proto.CreateMarketplaceContract', null, global);
goog.exportSymbol('proto.proto.CreateValidatorContract', null, global);
goog.exportSymbol('proto.proto.DelegateContract', null, global);
goog.exportSymbol('proto.proto.FreezeContract', null, global);
goog.exportSymbol('proto.proto.PackInfo', null, global);
goog.exportSymbol('proto.proto.PackItem', null, global);
goog.exportSymbol('proto.proto.PropertiesInfo', null, global);
goog.exportSymbol('proto.proto.ProposalContract', null, global);
goog.exportSymbol('proto.proto.RolesInfo', null, global);
goog.exportSymbol('proto.proto.RoyaltiesInfo', null, global);
goog.exportSymbol('proto.proto.RoyaltyInfo', null, global);
goog.exportSymbol('proto.proto.SellContract', null, global);
goog.exportSymbol('proto.proto.SellContract.EnumMarketType', null, global);
goog.exportSymbol('proto.proto.SetAccountNameContract', null, global);
goog.exportSymbol('proto.proto.SetITOPricesContract', null, global);
goog.exportSymbol('proto.proto.StakingInfo', null, global);
goog.exportSymbol('proto.proto.StakingInfo.InterestType', null, global);
goog.exportSymbol('proto.proto.TransferContract', null, global);
goog.exportSymbol('proto.proto.UndelegateContract', null, global);
goog.exportSymbol('proto.proto.UnfreezeContract', null, global);
goog.exportSymbol('proto.proto.UnjailContract', null, global);
goog.exportSymbol('proto.proto.UpdateAccountPermissionContract', null, global);
goog.exportSymbol('proto.proto.ValidatorConfig', null, global);
goog.exportSymbol('proto.proto.ValidatorConfigContract', null, global);
goog.exportSymbol('proto.proto.VoteContract', null, global);
goog.exportSymbol('proto.proto.VoteContract.EnumVoteType', null, global);
goog.exportSymbol('proto.proto.WithdrawContract', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TransferContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TransferContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TransferContract.displayName = 'proto.proto.TransferContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CreateAssetContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CreateAssetContract.repeatedFields_, null);
};
goog.inherits(proto.proto.CreateAssetContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.CreateAssetContract.displayName = 'proto.proto.CreateAssetContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PropertiesInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PropertiesInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PropertiesInfo.displayName = 'proto.proto.PropertiesInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AttributesInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.AttributesInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.AttributesInfo.displayName = 'proto.proto.AttributesInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.StakingInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.StakingInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.StakingInfo.displayName = 'proto.proto.StakingInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RolesInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RolesInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RolesInfo.displayName = 'proto.proto.RolesInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoyaltiesInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.RoyaltiesInfo.repeatedFields_, null);
};
goog.inherits(proto.proto.RoyaltiesInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RoyaltiesInfo.displayName = 'proto.proto.RoyaltiesInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoyaltyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoyaltyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RoyaltyInfo.displayName = 'proto.proto.RoyaltyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AssetTriggerContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.AssetTriggerContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.AssetTriggerContract.displayName = 'proto.proto.AssetTriggerContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ValidatorConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ValidatorConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ValidatorConfig.displayName = 'proto.proto.ValidatorConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CreateValidatorContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CreateValidatorContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.CreateValidatorContract.displayName = 'proto.proto.CreateValidatorContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ValidatorConfigContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ValidatorConfigContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ValidatorConfigContract.displayName = 'proto.proto.ValidatorConfigContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FreezeContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FreezeContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FreezeContract.displayName = 'proto.proto.FreezeContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UnfreezeContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UnfreezeContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UnfreezeContract.displayName = 'proto.proto.UnfreezeContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DelegateContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DelegateContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DelegateContract.displayName = 'proto.proto.DelegateContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UndelegateContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UndelegateContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UndelegateContract.displayName = 'proto.proto.UndelegateContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WithdrawContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WithdrawContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.WithdrawContract.displayName = 'proto.proto.WithdrawContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ClaimContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ClaimContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ClaimContract.displayName = 'proto.proto.ClaimContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UnjailContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UnjailContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UnjailContract.displayName = 'proto.proto.UnjailContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetAccountNameContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SetAccountNameContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetAccountNameContract.displayName = 'proto.proto.SetAccountNameContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ProposalContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ProposalContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ProposalContract.displayName = 'proto.proto.ProposalContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.VoteContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.VoteContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.VoteContract.displayName = 'proto.proto.VoteContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ConfigITOContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ConfigITOContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ConfigITOContract.displayName = 'proto.proto.ConfigITOContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetITOPricesContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SetITOPricesContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetITOPricesContract.displayName = 'proto.proto.SetITOPricesContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PackInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.PackInfo.repeatedFields_, null);
};
goog.inherits(proto.proto.PackInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PackInfo.displayName = 'proto.proto.PackInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PackItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PackItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PackItem.displayName = 'proto.proto.PackItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.BuyContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.BuyContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.BuyContract.displayName = 'proto.proto.BuyContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SellContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SellContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SellContract.displayName = 'proto.proto.SellContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CancelMarketOrderContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CancelMarketOrderContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.CancelMarketOrderContract.displayName = 'proto.proto.CancelMarketOrderContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CreateMarketplaceContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CreateMarketplaceContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.CreateMarketplaceContract.displayName = 'proto.proto.CreateMarketplaceContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ConfigMarketplaceContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ConfigMarketplaceContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ConfigMarketplaceContract.displayName = 'proto.proto.ConfigMarketplaceContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AccKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.AccKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.AccKey.displayName = 'proto.proto.AccKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AccPermission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.AccPermission.repeatedFields_, null);
};
goog.inherits(proto.proto.AccPermission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.AccPermission.displayName = 'proto.proto.AccPermission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UpdateAccountPermissionContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.UpdateAccountPermissionContract.repeatedFields_, null);
};
goog.inherits(proto.proto.UpdateAccountPermissionContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UpdateAccountPermissionContract.displayName = 'proto.proto.UpdateAccountPermissionContract';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TransferContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TransferContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TransferContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransferContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    toaddress: msg.getToaddress_asB64(),
    assetid: msg.getAssetid_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TransferContract}
 */
proto.proto.TransferContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TransferContract;
  return proto.proto.TransferContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TransferContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TransferContract}
 */
proto.proto.TransferContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToaddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TransferContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TransferContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TransferContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransferContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAssetid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional bytes ToAddress = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.TransferContract.prototype.getToaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ToAddress = 1;
 * This is a type-conversion wrapper around `getToaddress()`
 * @return {string}
 */
proto.proto.TransferContract.prototype.getToaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToaddress()));
};


/**
 * optional bytes ToAddress = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToaddress()`
 * @return {!Uint8Array}
 */
proto.proto.TransferContract.prototype.getToaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToaddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.TransferContract} returns this
 */
proto.proto.TransferContract.prototype.setToaddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes AssetID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.TransferContract.prototype.getAssetid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes AssetID = 2;
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {string}
 */
proto.proto.TransferContract.prototype.getAssetid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetid()));
};


/**
 * optional bytes AssetID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {!Uint8Array}
 */
proto.proto.TransferContract.prototype.getAssetid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.TransferContract} returns this
 */
proto.proto.TransferContract.prototype.setAssetid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int64 Amount = 3;
 * @return {number}
 */
proto.proto.TransferContract.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.TransferContract} returns this
 */
proto.proto.TransferContract.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CreateAssetContract.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CreateAssetContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CreateAssetContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CreateAssetContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CreateAssetContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: msg.getName_asB64(),
    ticker: msg.getTicker_asB64(),
    owneraddress: msg.getOwneraddress_asB64(),
    logo: jspb.Message.getFieldWithDefault(msg, 5, ""),
    urisMap: (f = msg.getUrisMap()) ? f.toObject(includeInstance, undefined) : [],
    precision: jspb.Message.getFieldWithDefault(msg, 7, 0),
    initialsupply: jspb.Message.getFieldWithDefault(msg, 8, 0),
    maxsupply: jspb.Message.getFieldWithDefault(msg, 9, 0),
    royalties: (f = msg.getRoyalties()) && proto.proto.RoyaltiesInfo.toObject(includeInstance, f),
    properties: (f = msg.getProperties()) && proto.proto.PropertiesInfo.toObject(includeInstance, f),
    attributes: (f = msg.getAttributes()) && proto.proto.AttributesInfo.toObject(includeInstance, f),
    staking: (f = msg.getStaking()) && proto.proto.StakingInfo.toObject(includeInstance, f),
    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
    proto.proto.RolesInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CreateAssetContract}
 */
proto.proto.CreateAssetContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CreateAssetContract;
  return proto.proto.CreateAssetContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CreateAssetContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CreateAssetContract}
 */
proto.proto.CreateAssetContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.CreateAssetContract.EnumAssetType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTicker(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOwneraddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogo(value);
      break;
    case 6:
      var value = msg.getUrisMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrecision(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInitialsupply(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxsupply(value);
      break;
    case 10:
      var value = new proto.proto.RoyaltiesInfo;
      reader.readMessage(value,proto.proto.RoyaltiesInfo.deserializeBinaryFromReader);
      msg.setRoyalties(value);
      break;
    case 11:
      var value = new proto.proto.PropertiesInfo;
      reader.readMessage(value,proto.proto.PropertiesInfo.deserializeBinaryFromReader);
      msg.setProperties(value);
      break;
    case 12:
      var value = new proto.proto.AttributesInfo;
      reader.readMessage(value,proto.proto.AttributesInfo.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    case 13:
      var value = new proto.proto.StakingInfo;
      reader.readMessage(value,proto.proto.StakingInfo.deserializeBinaryFromReader);
      msg.setStaking(value);
      break;
    case 14:
      var value = new proto.proto.RolesInfo;
      reader.readMessage(value,proto.proto.RolesInfo.deserializeBinaryFromReader);
      msg.addRoles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CreateAssetContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CreateAssetContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CreateAssetContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CreateAssetContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTicker_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getOwneraddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getLogo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUrisMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getPrecision();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getInitialsupply();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getMaxsupply();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getRoyalties();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.RoyaltiesInfo.serializeBinaryToWriter
    );
  }
  f = message.getProperties();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.proto.PropertiesInfo.serializeBinaryToWriter
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.proto.AttributesInfo.serializeBinaryToWriter
    );
  }
  f = message.getStaking();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.proto.StakingInfo.serializeBinaryToWriter
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.proto.RolesInfo.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.CreateAssetContract.EnumAssetType = {
  FUNGIBLE: 0,
  NONFUNGIBLE: 1
};

/**
 * optional EnumAssetType Type = 1;
 * @return {!proto.proto.CreateAssetContract.EnumAssetType}
 */
proto.proto.CreateAssetContract.prototype.getType = function() {
  return /** @type {!proto.proto.CreateAssetContract.EnumAssetType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.CreateAssetContract.EnumAssetType} value
 * @return {!proto.proto.CreateAssetContract} returns this
 */
proto.proto.CreateAssetContract.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes Name = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.CreateAssetContract.prototype.getName = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Name = 2;
 * This is a type-conversion wrapper around `getName()`
 * @return {string}
 */
proto.proto.CreateAssetContract.prototype.getName_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getName()));
};


/**
 * optional bytes Name = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {!Uint8Array}
 */
proto.proto.CreateAssetContract.prototype.getName_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getName()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.CreateAssetContract} returns this
 */
proto.proto.CreateAssetContract.prototype.setName = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes Ticker = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.CreateAssetContract.prototype.getTicker = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes Ticker = 3;
 * This is a type-conversion wrapper around `getTicker()`
 * @return {string}
 */
proto.proto.CreateAssetContract.prototype.getTicker_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTicker()));
};


/**
 * optional bytes Ticker = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTicker()`
 * @return {!Uint8Array}
 */
proto.proto.CreateAssetContract.prototype.getTicker_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTicker()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.CreateAssetContract} returns this
 */
proto.proto.CreateAssetContract.prototype.setTicker = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes OwnerAddress = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.CreateAssetContract.prototype.getOwneraddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes OwnerAddress = 4;
 * This is a type-conversion wrapper around `getOwneraddress()`
 * @return {string}
 */
proto.proto.CreateAssetContract.prototype.getOwneraddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOwneraddress()));
};


/**
 * optional bytes OwnerAddress = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwneraddress()`
 * @return {!Uint8Array}
 */
proto.proto.CreateAssetContract.prototype.getOwneraddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOwneraddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.CreateAssetContract} returns this
 */
proto.proto.CreateAssetContract.prototype.setOwneraddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string Logo = 5;
 * @return {string}
 */
proto.proto.CreateAssetContract.prototype.getLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.CreateAssetContract} returns this
 */
proto.proto.CreateAssetContract.prototype.setLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * map<string, string> URIs = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.proto.CreateAssetContract.prototype.getUrisMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.CreateAssetContract} returns this
 */
proto.proto.CreateAssetContract.prototype.clearUrisMap = function() {
  this.getUrisMap().clear();
  return this;};


/**
 * optional uint32 Precision = 7;
 * @return {number}
 */
proto.proto.CreateAssetContract.prototype.getPrecision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.CreateAssetContract} returns this
 */
proto.proto.CreateAssetContract.prototype.setPrecision = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 InitialSupply = 8;
 * @return {number}
 */
proto.proto.CreateAssetContract.prototype.getInitialsupply = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.CreateAssetContract} returns this
 */
proto.proto.CreateAssetContract.prototype.setInitialsupply = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 MaxSupply = 9;
 * @return {number}
 */
proto.proto.CreateAssetContract.prototype.getMaxsupply = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.CreateAssetContract} returns this
 */
proto.proto.CreateAssetContract.prototype.setMaxsupply = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional RoyaltiesInfo Royalties = 10;
 * @return {?proto.proto.RoyaltiesInfo}
 */
proto.proto.CreateAssetContract.prototype.getRoyalties = function() {
  return /** @type{?proto.proto.RoyaltiesInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoyaltiesInfo, 10));
};


/**
 * @param {?proto.proto.RoyaltiesInfo|undefined} value
 * @return {!proto.proto.CreateAssetContract} returns this
*/
proto.proto.CreateAssetContract.prototype.setRoyalties = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.CreateAssetContract} returns this
 */
proto.proto.CreateAssetContract.prototype.clearRoyalties = function() {
  return this.setRoyalties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateAssetContract.prototype.hasRoyalties = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PropertiesInfo Properties = 11;
 * @return {?proto.proto.PropertiesInfo}
 */
proto.proto.CreateAssetContract.prototype.getProperties = function() {
  return /** @type{?proto.proto.PropertiesInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.PropertiesInfo, 11));
};


/**
 * @param {?proto.proto.PropertiesInfo|undefined} value
 * @return {!proto.proto.CreateAssetContract} returns this
*/
proto.proto.CreateAssetContract.prototype.setProperties = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.CreateAssetContract} returns this
 */
proto.proto.CreateAssetContract.prototype.clearProperties = function() {
  return this.setProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateAssetContract.prototype.hasProperties = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional AttributesInfo Attributes = 12;
 * @return {?proto.proto.AttributesInfo}
 */
proto.proto.CreateAssetContract.prototype.getAttributes = function() {
  return /** @type{?proto.proto.AttributesInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.AttributesInfo, 12));
};


/**
 * @param {?proto.proto.AttributesInfo|undefined} value
 * @return {!proto.proto.CreateAssetContract} returns this
*/
proto.proto.CreateAssetContract.prototype.setAttributes = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.CreateAssetContract} returns this
 */
proto.proto.CreateAssetContract.prototype.clearAttributes = function() {
  return this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateAssetContract.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional StakingInfo Staking = 13;
 * @return {?proto.proto.StakingInfo}
 */
proto.proto.CreateAssetContract.prototype.getStaking = function() {
  return /** @type{?proto.proto.StakingInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.StakingInfo, 13));
};


/**
 * @param {?proto.proto.StakingInfo|undefined} value
 * @return {!proto.proto.CreateAssetContract} returns this
*/
proto.proto.CreateAssetContract.prototype.setStaking = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.CreateAssetContract} returns this
 */
proto.proto.CreateAssetContract.prototype.clearStaking = function() {
  return this.setStaking(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateAssetContract.prototype.hasStaking = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated RolesInfo Roles = 14;
 * @return {!Array<!proto.proto.RolesInfo>}
 */
proto.proto.CreateAssetContract.prototype.getRolesList = function() {
  return /** @type{!Array<!proto.proto.RolesInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.RolesInfo, 14));
};


/**
 * @param {!Array<!proto.proto.RolesInfo>} value
 * @return {!proto.proto.CreateAssetContract} returns this
*/
proto.proto.CreateAssetContract.prototype.setRolesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.proto.RolesInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.RolesInfo}
 */
proto.proto.CreateAssetContract.prototype.addRoles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.proto.RolesInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.CreateAssetContract} returns this
 */
proto.proto.CreateAssetContract.prototype.clearRolesList = function() {
  return this.setRolesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PropertiesInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PropertiesInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PropertiesInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PropertiesInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    canfreeze: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    canwipe: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    canpause: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    canmint: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    canburn: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    canchangeowner: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    canaddroles: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PropertiesInfo}
 */
proto.proto.PropertiesInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PropertiesInfo;
  return proto.proto.PropertiesInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PropertiesInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PropertiesInfo}
 */
proto.proto.PropertiesInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanfreeze(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanwipe(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanpause(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanmint(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanburn(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanchangeowner(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanaddroles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PropertiesInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PropertiesInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PropertiesInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PropertiesInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCanfreeze();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCanwipe();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCanpause();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getCanmint();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCanburn();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getCanchangeowner();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getCanaddroles();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional bool CanFreeze = 1;
 * @return {boolean}
 */
proto.proto.PropertiesInfo.prototype.getCanfreeze = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.PropertiesInfo} returns this
 */
proto.proto.PropertiesInfo.prototype.setCanfreeze = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool CanWipe = 2;
 * @return {boolean}
 */
proto.proto.PropertiesInfo.prototype.getCanwipe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.PropertiesInfo} returns this
 */
proto.proto.PropertiesInfo.prototype.setCanwipe = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool CanPause = 3;
 * @return {boolean}
 */
proto.proto.PropertiesInfo.prototype.getCanpause = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.PropertiesInfo} returns this
 */
proto.proto.PropertiesInfo.prototype.setCanpause = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool CanMint = 4;
 * @return {boolean}
 */
proto.proto.PropertiesInfo.prototype.getCanmint = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.PropertiesInfo} returns this
 */
proto.proto.PropertiesInfo.prototype.setCanmint = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool CanBurn = 5;
 * @return {boolean}
 */
proto.proto.PropertiesInfo.prototype.getCanburn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.PropertiesInfo} returns this
 */
proto.proto.PropertiesInfo.prototype.setCanburn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool CanChangeOwner = 6;
 * @return {boolean}
 */
proto.proto.PropertiesInfo.prototype.getCanchangeowner = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.PropertiesInfo} returns this
 */
proto.proto.PropertiesInfo.prototype.setCanchangeowner = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool CanAddRoles = 7;
 * @return {boolean}
 */
proto.proto.PropertiesInfo.prototype.getCanaddroles = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.PropertiesInfo} returns this
 */
proto.proto.PropertiesInfo.prototype.setCanaddroles = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AttributesInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AttributesInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AttributesInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AttributesInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    ispaused: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    isnftmintstopped: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AttributesInfo}
 */
proto.proto.AttributesInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AttributesInfo;
  return proto.proto.AttributesInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AttributesInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AttributesInfo}
 */
proto.proto.AttributesInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspaused(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnftmintstopped(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AttributesInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AttributesInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AttributesInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AttributesInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIspaused();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIsnftmintstopped();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool IsPaused = 1;
 * @return {boolean}
 */
proto.proto.AttributesInfo.prototype.getIspaused = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.AttributesInfo} returns this
 */
proto.proto.AttributesInfo.prototype.setIspaused = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool IsNFTMintStopped = 2;
 * @return {boolean}
 */
proto.proto.AttributesInfo.prototype.getIsnftmintstopped = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.AttributesInfo} returns this
 */
proto.proto.AttributesInfo.prototype.setIsnftmintstopped = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.StakingInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.StakingInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.StakingInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StakingInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    apr: jspb.Message.getFieldWithDefault(msg, 2, 0),
    minepochstoclaim: jspb.Message.getFieldWithDefault(msg, 3, 0),
    minepochstounstake: jspb.Message.getFieldWithDefault(msg, 4, 0),
    minepochstowithdraw: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.StakingInfo}
 */
proto.proto.StakingInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.StakingInfo;
  return proto.proto.StakingInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.StakingInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.StakingInfo}
 */
proto.proto.StakingInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.StakingInfo.InterestType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setApr(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinepochstoclaim(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinepochstounstake(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinepochstowithdraw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.StakingInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.StakingInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.StakingInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StakingInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getApr();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMinepochstoclaim();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMinepochstounstake();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMinepochstowithdraw();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.StakingInfo.InterestType = {
  APRI: 0,
  FPRI: 1
};

/**
 * optional InterestType Type = 1;
 * @return {!proto.proto.StakingInfo.InterestType}
 */
proto.proto.StakingInfo.prototype.getType = function() {
  return /** @type {!proto.proto.StakingInfo.InterestType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.StakingInfo.InterestType} value
 * @return {!proto.proto.StakingInfo} returns this
 */
proto.proto.StakingInfo.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 APR = 2;
 * @return {number}
 */
proto.proto.StakingInfo.prototype.getApr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.StakingInfo} returns this
 */
proto.proto.StakingInfo.prototype.setApr = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 MinEpochsToClaim = 3;
 * @return {number}
 */
proto.proto.StakingInfo.prototype.getMinepochstoclaim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.StakingInfo} returns this
 */
proto.proto.StakingInfo.prototype.setMinepochstoclaim = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 MinEpochsToUnstake = 4;
 * @return {number}
 */
proto.proto.StakingInfo.prototype.getMinepochstounstake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.StakingInfo} returns this
 */
proto.proto.StakingInfo.prototype.setMinepochstounstake = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 MinEpochsToWithdraw = 5;
 * @return {number}
 */
proto.proto.StakingInfo.prototype.getMinepochstowithdraw = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.StakingInfo} returns this
 */
proto.proto.StakingInfo.prototype.setMinepochstowithdraw = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RolesInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RolesInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RolesInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RolesInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    hasrolemint: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    hasrolesetitoprices: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RolesInfo}
 */
proto.proto.RolesInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RolesInfo;
  return proto.proto.RolesInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RolesInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RolesInfo}
 */
proto.proto.RolesInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasrolemint(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasrolesetitoprices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RolesInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RolesInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RolesInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RolesInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHasrolemint();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getHasrolesetitoprices();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.RolesInfo.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.proto.RolesInfo.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.proto.RolesInfo.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.RolesInfo} returns this
 */
proto.proto.RolesInfo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool HasRoleMint = 2;
 * @return {boolean}
 */
proto.proto.RolesInfo.prototype.getHasrolemint = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.RolesInfo} returns this
 */
proto.proto.RolesInfo.prototype.setHasrolemint = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool HasRoleSetITOPrices = 3;
 * @return {boolean}
 */
proto.proto.RolesInfo.prototype.getHasrolesetitoprices = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.RolesInfo} returns this
 */
proto.proto.RolesInfo.prototype.setHasrolesetitoprices = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.RoyaltiesInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoyaltiesInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoyaltiesInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoyaltiesInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoyaltiesInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    transferpercentageList: jspb.Message.toObjectList(msg.getTransferpercentageList(),
    proto.proto.RoyaltyInfo.toObject, includeInstance),
    transferfixed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    marketpercentage: jspb.Message.getFieldWithDefault(msg, 4, 0),
    marketfixed: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoyaltiesInfo}
 */
proto.proto.RoyaltiesInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoyaltiesInfo;
  return proto.proto.RoyaltiesInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoyaltiesInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoyaltiesInfo}
 */
proto.proto.RoyaltiesInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = new proto.proto.RoyaltyInfo;
      reader.readMessage(value,proto.proto.RoyaltyInfo.deserializeBinaryFromReader);
      msg.addTransferpercentage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTransferfixed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMarketpercentage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMarketfixed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoyaltiesInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoyaltiesInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoyaltiesInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoyaltiesInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTransferpercentageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.RoyaltyInfo.serializeBinaryToWriter
    );
  }
  f = message.getTransferfixed();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMarketpercentage();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMarketfixed();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.RoyaltiesInfo.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.proto.RoyaltiesInfo.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.proto.RoyaltiesInfo.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.RoyaltiesInfo} returns this
 */
proto.proto.RoyaltiesInfo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated RoyaltyInfo TransferPercentage = 2;
 * @return {!Array<!proto.proto.RoyaltyInfo>}
 */
proto.proto.RoyaltiesInfo.prototype.getTransferpercentageList = function() {
  return /** @type{!Array<!proto.proto.RoyaltyInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.RoyaltyInfo, 2));
};


/**
 * @param {!Array<!proto.proto.RoyaltyInfo>} value
 * @return {!proto.proto.RoyaltiesInfo} returns this
*/
proto.proto.RoyaltiesInfo.prototype.setTransferpercentageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.RoyaltyInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.RoyaltyInfo}
 */
proto.proto.RoyaltiesInfo.prototype.addTransferpercentage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.RoyaltyInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.RoyaltiesInfo} returns this
 */
proto.proto.RoyaltiesInfo.prototype.clearTransferpercentageList = function() {
  return this.setTransferpercentageList([]);
};


/**
 * optional int64 TransferFixed = 3;
 * @return {number}
 */
proto.proto.RoyaltiesInfo.prototype.getTransferfixed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.RoyaltiesInfo} returns this
 */
proto.proto.RoyaltiesInfo.prototype.setTransferfixed = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 MarketPercentage = 4;
 * @return {number}
 */
proto.proto.RoyaltiesInfo.prototype.getMarketpercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.RoyaltiesInfo} returns this
 */
proto.proto.RoyaltiesInfo.prototype.setMarketpercentage = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 MarketFixed = 5;
 * @return {number}
 */
proto.proto.RoyaltiesInfo.prototype.getMarketfixed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.RoyaltiesInfo} returns this
 */
proto.proto.RoyaltiesInfo.prototype.setMarketfixed = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoyaltyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoyaltyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoyaltyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoyaltyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    percentage: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoyaltyInfo}
 */
proto.proto.RoyaltyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoyaltyInfo;
  return proto.proto.RoyaltyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoyaltyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoyaltyInfo}
 */
proto.proto.RoyaltyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPercentage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoyaltyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoyaltyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoyaltyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoyaltyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPercentage();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional int64 Amount = 1;
 * @return {number}
 */
proto.proto.RoyaltyInfo.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.RoyaltyInfo} returns this
 */
proto.proto.RoyaltyInfo.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 Percentage = 2;
 * @return {number}
 */
proto.proto.RoyaltyInfo.prototype.getPercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.RoyaltyInfo} returns this
 */
proto.proto.RoyaltyInfo.prototype.setPercentage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AssetTriggerContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AssetTriggerContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AssetTriggerContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AssetTriggerContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    triggertype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assetid: msg.getAssetid_asB64(),
    toaddress: msg.getToaddress_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    mime: msg.getMime_asB64(),
    logo: jspb.Message.getFieldWithDefault(msg, 6, ""),
    urisMap: (f = msg.getUrisMap()) ? f.toObject(includeInstance, undefined) : [],
    role: (f = msg.getRole()) && proto.proto.RolesInfo.toObject(includeInstance, f),
    staking: (f = msg.getStaking()) && proto.proto.StakingInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AssetTriggerContract}
 */
proto.proto.AssetTriggerContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AssetTriggerContract;
  return proto.proto.AssetTriggerContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AssetTriggerContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AssetTriggerContract}
 */
proto.proto.AssetTriggerContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.AssetTriggerContract.EnumTriggerType} */ (reader.readEnum());
      msg.setTriggertype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToaddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogo(value);
      break;
    case 7:
      var value = msg.getUrisMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 8:
      var value = new proto.proto.RolesInfo;
      reader.readMessage(value,proto.proto.RolesInfo.deserializeBinaryFromReader);
      msg.setRole(value);
      break;
    case 9:
      var value = new proto.proto.StakingInfo;
      reader.readMessage(value,proto.proto.StakingInfo.deserializeBinaryFromReader);
      msg.setStaking(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AssetTriggerContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AssetTriggerContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AssetTriggerContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AssetTriggerContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTriggertype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAssetid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getToaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMime_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getLogo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUrisMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRole();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.proto.RolesInfo.serializeBinaryToWriter
    );
  }
  f = message.getStaking();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.proto.StakingInfo.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.AssetTriggerContract.EnumTriggerType = {
  MINT: 0,
  BURN: 1,
  WIPE: 2,
  PAUSE: 3,
  RESUME: 4,
  CHANGEOWNER: 5,
  ADDROLE: 6,
  REMOVEROLE: 7,
  UPDATEMETADATA: 8,
  STOPNFTMINT: 9,
  UPDATELOGO: 10,
  UPDATEURIS: 11,
  CHANGEROYALTIESRECEIVER: 12,
  UPDATESTAKING: 13
};

/**
 * optional EnumTriggerType TriggerType = 1;
 * @return {!proto.proto.AssetTriggerContract.EnumTriggerType}
 */
proto.proto.AssetTriggerContract.prototype.getTriggertype = function() {
  return /** @type {!proto.proto.AssetTriggerContract.EnumTriggerType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.AssetTriggerContract.EnumTriggerType} value
 * @return {!proto.proto.AssetTriggerContract} returns this
 */
proto.proto.AssetTriggerContract.prototype.setTriggertype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes AssetID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.AssetTriggerContract.prototype.getAssetid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes AssetID = 2;
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {string}
 */
proto.proto.AssetTriggerContract.prototype.getAssetid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetid()));
};


/**
 * optional bytes AssetID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {!Uint8Array}
 */
proto.proto.AssetTriggerContract.prototype.getAssetid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.AssetTriggerContract} returns this
 */
proto.proto.AssetTriggerContract.prototype.setAssetid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes ToAddress = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.AssetTriggerContract.prototype.getToaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ToAddress = 3;
 * This is a type-conversion wrapper around `getToaddress()`
 * @return {string}
 */
proto.proto.AssetTriggerContract.prototype.getToaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToaddress()));
};


/**
 * optional bytes ToAddress = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToaddress()`
 * @return {!Uint8Array}
 */
proto.proto.AssetTriggerContract.prototype.getToaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToaddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.AssetTriggerContract} returns this
 */
proto.proto.AssetTriggerContract.prototype.setToaddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int64 Amount = 4;
 * @return {number}
 */
proto.proto.AssetTriggerContract.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.AssetTriggerContract} returns this
 */
proto.proto.AssetTriggerContract.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes MIME = 5;
 * @return {!(string|Uint8Array)}
 */
proto.proto.AssetTriggerContract.prototype.getMime = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes MIME = 5;
 * This is a type-conversion wrapper around `getMime()`
 * @return {string}
 */
proto.proto.AssetTriggerContract.prototype.getMime_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMime()));
};


/**
 * optional bytes MIME = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMime()`
 * @return {!Uint8Array}
 */
proto.proto.AssetTriggerContract.prototype.getMime_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMime()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.AssetTriggerContract} returns this
 */
proto.proto.AssetTriggerContract.prototype.setMime = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional string Logo = 6;
 * @return {string}
 */
proto.proto.AssetTriggerContract.prototype.getLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.AssetTriggerContract} returns this
 */
proto.proto.AssetTriggerContract.prototype.setLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * map<string, string> URIs = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.proto.AssetTriggerContract.prototype.getUrisMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.AssetTriggerContract} returns this
 */
proto.proto.AssetTriggerContract.prototype.clearUrisMap = function() {
  this.getUrisMap().clear();
  return this;};


/**
 * optional RolesInfo Role = 8;
 * @return {?proto.proto.RolesInfo}
 */
proto.proto.AssetTriggerContract.prototype.getRole = function() {
  return /** @type{?proto.proto.RolesInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.RolesInfo, 8));
};


/**
 * @param {?proto.proto.RolesInfo|undefined} value
 * @return {!proto.proto.AssetTriggerContract} returns this
*/
proto.proto.AssetTriggerContract.prototype.setRole = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.AssetTriggerContract} returns this
 */
proto.proto.AssetTriggerContract.prototype.clearRole = function() {
  return this.setRole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.AssetTriggerContract.prototype.hasRole = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional StakingInfo Staking = 9;
 * @return {?proto.proto.StakingInfo}
 */
proto.proto.AssetTriggerContract.prototype.getStaking = function() {
  return /** @type{?proto.proto.StakingInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.StakingInfo, 9));
};


/**
 * @param {?proto.proto.StakingInfo|undefined} value
 * @return {!proto.proto.AssetTriggerContract} returns this
*/
proto.proto.AssetTriggerContract.prototype.setStaking = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.AssetTriggerContract} returns this
 */
proto.proto.AssetTriggerContract.prototype.clearStaking = function() {
  return this.setStaking(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.AssetTriggerContract.prototype.hasStaking = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ValidatorConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ValidatorConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ValidatorConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ValidatorConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    blspublickey: msg.getBlspublickey_asB64(),
    rewardaddress: msg.getRewardaddress_asB64(),
    candelegate: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    commission: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxdelegationamount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    logo: jspb.Message.getFieldWithDefault(msg, 6, ""),
    urisMap: (f = msg.getUrisMap()) ? f.toObject(includeInstance, undefined) : [],
    name: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ValidatorConfig}
 */
proto.proto.ValidatorConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ValidatorConfig;
  return proto.proto.ValidatorConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ValidatorConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ValidatorConfig}
 */
proto.proto.ValidatorConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlspublickey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRewardaddress(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCandelegate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommission(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxdelegationamount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogo(value);
      break;
    case 7:
      var value = msg.getUrisMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ValidatorConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ValidatorConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ValidatorConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ValidatorConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlspublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRewardaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCandelegate();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getCommission();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMaxdelegationamount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getLogo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUrisMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional bytes BLSPublicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ValidatorConfig.prototype.getBlspublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes BLSPublicKey = 1;
 * This is a type-conversion wrapper around `getBlspublickey()`
 * @return {string}
 */
proto.proto.ValidatorConfig.prototype.getBlspublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlspublickey()));
};


/**
 * optional bytes BLSPublicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlspublickey()`
 * @return {!Uint8Array}
 */
proto.proto.ValidatorConfig.prototype.getBlspublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlspublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.ValidatorConfig} returns this
 */
proto.proto.ValidatorConfig.prototype.setBlspublickey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes RewardAddress = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ValidatorConfig.prototype.getRewardaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes RewardAddress = 2;
 * This is a type-conversion wrapper around `getRewardaddress()`
 * @return {string}
 */
proto.proto.ValidatorConfig.prototype.getRewardaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRewardaddress()));
};


/**
 * optional bytes RewardAddress = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRewardaddress()`
 * @return {!Uint8Array}
 */
proto.proto.ValidatorConfig.prototype.getRewardaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRewardaddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.ValidatorConfig} returns this
 */
proto.proto.ValidatorConfig.prototype.setRewardaddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool CanDelegate = 3;
 * @return {boolean}
 */
proto.proto.ValidatorConfig.prototype.getCandelegate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.ValidatorConfig} returns this
 */
proto.proto.ValidatorConfig.prototype.setCandelegate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint32 Commission = 4;
 * @return {number}
 */
proto.proto.ValidatorConfig.prototype.getCommission = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ValidatorConfig} returns this
 */
proto.proto.ValidatorConfig.prototype.setCommission = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 MaxDelegationAmount = 5;
 * @return {number}
 */
proto.proto.ValidatorConfig.prototype.getMaxdelegationamount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ValidatorConfig} returns this
 */
proto.proto.ValidatorConfig.prototype.setMaxdelegationamount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string Logo = 6;
 * @return {string}
 */
proto.proto.ValidatorConfig.prototype.getLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.ValidatorConfig} returns this
 */
proto.proto.ValidatorConfig.prototype.setLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * map<string, string> URIs = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.proto.ValidatorConfig.prototype.getUrisMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.ValidatorConfig} returns this
 */
proto.proto.ValidatorConfig.prototype.clearUrisMap = function() {
  this.getUrisMap().clear();
  return this;};


/**
 * optional string Name = 8;
 * @return {string}
 */
proto.proto.ValidatorConfig.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.ValidatorConfig} returns this
 */
proto.proto.ValidatorConfig.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CreateValidatorContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CreateValidatorContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CreateValidatorContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CreateValidatorContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    owneraddress: msg.getOwneraddress_asB64(),
    config: (f = msg.getConfig()) && proto.proto.ValidatorConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CreateValidatorContract}
 */
proto.proto.CreateValidatorContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CreateValidatorContract;
  return proto.proto.CreateValidatorContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CreateValidatorContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CreateValidatorContract}
 */
proto.proto.CreateValidatorContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOwneraddress(value);
      break;
    case 2:
      var value = new proto.proto.ValidatorConfig;
      reader.readMessage(value,proto.proto.ValidatorConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CreateValidatorContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CreateValidatorContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CreateValidatorContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CreateValidatorContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwneraddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.ValidatorConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes OwnerAddress = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.CreateValidatorContract.prototype.getOwneraddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes OwnerAddress = 1;
 * This is a type-conversion wrapper around `getOwneraddress()`
 * @return {string}
 */
proto.proto.CreateValidatorContract.prototype.getOwneraddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOwneraddress()));
};


/**
 * optional bytes OwnerAddress = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwneraddress()`
 * @return {!Uint8Array}
 */
proto.proto.CreateValidatorContract.prototype.getOwneraddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOwneraddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.CreateValidatorContract} returns this
 */
proto.proto.CreateValidatorContract.prototype.setOwneraddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ValidatorConfig Config = 2;
 * @return {?proto.proto.ValidatorConfig}
 */
proto.proto.CreateValidatorContract.prototype.getConfig = function() {
  return /** @type{?proto.proto.ValidatorConfig} */ (
    jspb.Message.getWrapperField(this, proto.proto.ValidatorConfig, 2));
};


/**
 * @param {?proto.proto.ValidatorConfig|undefined} value
 * @return {!proto.proto.CreateValidatorContract} returns this
*/
proto.proto.CreateValidatorContract.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.CreateValidatorContract} returns this
 */
proto.proto.CreateValidatorContract.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateValidatorContract.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ValidatorConfigContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ValidatorConfigContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ValidatorConfigContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ValidatorConfigContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.proto.ValidatorConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ValidatorConfigContract}
 */
proto.proto.ValidatorConfigContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ValidatorConfigContract;
  return proto.proto.ValidatorConfigContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ValidatorConfigContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ValidatorConfigContract}
 */
proto.proto.ValidatorConfigContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.ValidatorConfig;
      reader.readMessage(value,proto.proto.ValidatorConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ValidatorConfigContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ValidatorConfigContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ValidatorConfigContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ValidatorConfigContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.ValidatorConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional ValidatorConfig Config = 1;
 * @return {?proto.proto.ValidatorConfig}
 */
proto.proto.ValidatorConfigContract.prototype.getConfig = function() {
  return /** @type{?proto.proto.ValidatorConfig} */ (
    jspb.Message.getWrapperField(this, proto.proto.ValidatorConfig, 1));
};


/**
 * @param {?proto.proto.ValidatorConfig|undefined} value
 * @return {!proto.proto.ValidatorConfigContract} returns this
*/
proto.proto.ValidatorConfigContract.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ValidatorConfigContract} returns this
 */
proto.proto.ValidatorConfigContract.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ValidatorConfigContract.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FreezeContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FreezeContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FreezeContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FreezeContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetid: msg.getAssetid_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FreezeContract}
 */
proto.proto.FreezeContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FreezeContract;
  return proto.proto.FreezeContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FreezeContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FreezeContract}
 */
proto.proto.FreezeContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FreezeContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FreezeContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FreezeContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FreezeContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes AssetID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.FreezeContract.prototype.getAssetid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes AssetID = 1;
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {string}
 */
proto.proto.FreezeContract.prototype.getAssetid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetid()));
};


/**
 * optional bytes AssetID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {!Uint8Array}
 */
proto.proto.FreezeContract.prototype.getAssetid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.FreezeContract} returns this
 */
proto.proto.FreezeContract.prototype.setAssetid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 Amount = 2;
 * @return {number}
 */
proto.proto.FreezeContract.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FreezeContract} returns this
 */
proto.proto.FreezeContract.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UnfreezeContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UnfreezeContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UnfreezeContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UnfreezeContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetid: msg.getAssetid_asB64(),
    bucketid: msg.getBucketid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UnfreezeContract}
 */
proto.proto.UnfreezeContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UnfreezeContract;
  return proto.proto.UnfreezeContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UnfreezeContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UnfreezeContract}
 */
proto.proto.UnfreezeContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBucketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UnfreezeContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UnfreezeContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UnfreezeContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UnfreezeContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBucketid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes AssetID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.UnfreezeContract.prototype.getAssetid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes AssetID = 1;
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {string}
 */
proto.proto.UnfreezeContract.prototype.getAssetid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetid()));
};


/**
 * optional bytes AssetID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {!Uint8Array}
 */
proto.proto.UnfreezeContract.prototype.getAssetid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.UnfreezeContract} returns this
 */
proto.proto.UnfreezeContract.prototype.setAssetid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes BucketID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.UnfreezeContract.prototype.getBucketid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes BucketID = 2;
 * This is a type-conversion wrapper around `getBucketid()`
 * @return {string}
 */
proto.proto.UnfreezeContract.prototype.getBucketid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBucketid()));
};


/**
 * optional bytes BucketID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBucketid()`
 * @return {!Uint8Array}
 */
proto.proto.UnfreezeContract.prototype.getBucketid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBucketid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.UnfreezeContract} returns this
 */
proto.proto.UnfreezeContract.prototype.setBucketid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DelegateContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DelegateContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DelegateContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DelegateContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    toaddress: msg.getToaddress_asB64(),
    bucketid: msg.getBucketid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DelegateContract}
 */
proto.proto.DelegateContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DelegateContract;
  return proto.proto.DelegateContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DelegateContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DelegateContract}
 */
proto.proto.DelegateContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToaddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBucketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DelegateContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DelegateContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DelegateContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DelegateContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBucketid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes ToAddress = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.DelegateContract.prototype.getToaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ToAddress = 1;
 * This is a type-conversion wrapper around `getToaddress()`
 * @return {string}
 */
proto.proto.DelegateContract.prototype.getToaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToaddress()));
};


/**
 * optional bytes ToAddress = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToaddress()`
 * @return {!Uint8Array}
 */
proto.proto.DelegateContract.prototype.getToaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToaddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.DelegateContract} returns this
 */
proto.proto.DelegateContract.prototype.setToaddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes BucketID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.DelegateContract.prototype.getBucketid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes BucketID = 2;
 * This is a type-conversion wrapper around `getBucketid()`
 * @return {string}
 */
proto.proto.DelegateContract.prototype.getBucketid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBucketid()));
};


/**
 * optional bytes BucketID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBucketid()`
 * @return {!Uint8Array}
 */
proto.proto.DelegateContract.prototype.getBucketid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBucketid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.DelegateContract} returns this
 */
proto.proto.DelegateContract.prototype.setBucketid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UndelegateContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UndelegateContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UndelegateContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UndelegateContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketid: msg.getBucketid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UndelegateContract}
 */
proto.proto.UndelegateContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UndelegateContract;
  return proto.proto.UndelegateContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UndelegateContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UndelegateContract}
 */
proto.proto.UndelegateContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBucketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UndelegateContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UndelegateContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UndelegateContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UndelegateContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes BucketID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.UndelegateContract.prototype.getBucketid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes BucketID = 1;
 * This is a type-conversion wrapper around `getBucketid()`
 * @return {string}
 */
proto.proto.UndelegateContract.prototype.getBucketid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBucketid()));
};


/**
 * optional bytes BucketID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBucketid()`
 * @return {!Uint8Array}
 */
proto.proto.UndelegateContract.prototype.getBucketid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBucketid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.UndelegateContract} returns this
 */
proto.proto.UndelegateContract.prototype.setBucketid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.WithdrawContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.WithdrawContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.WithdrawContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WithdrawContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetid: msg.getAssetid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WithdrawContract}
 */
proto.proto.WithdrawContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.WithdrawContract;
  return proto.proto.WithdrawContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WithdrawContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WithdrawContract}
 */
proto.proto.WithdrawContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WithdrawContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.WithdrawContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WithdrawContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WithdrawContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes AssetID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.WithdrawContract.prototype.getAssetid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes AssetID = 1;
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {string}
 */
proto.proto.WithdrawContract.prototype.getAssetid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetid()));
};


/**
 * optional bytes AssetID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {!Uint8Array}
 */
proto.proto.WithdrawContract.prototype.getAssetid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.WithdrawContract} returns this
 */
proto.proto.WithdrawContract.prototype.setAssetid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ClaimContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ClaimContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ClaimContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClaimContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    claimtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: msg.getId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ClaimContract}
 */
proto.proto.ClaimContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ClaimContract;
  return proto.proto.ClaimContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ClaimContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ClaimContract}
 */
proto.proto.ClaimContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.ClaimContract.EnumClaimType} */ (reader.readEnum());
      msg.setClaimtype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ClaimContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ClaimContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ClaimContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClaimContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaimtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.ClaimContract.EnumClaimType = {
  STAKINGCLAIM: 0,
  ALLOWANCECLAIM: 1,
  MARKETCLAIM: 2
};

/**
 * optional EnumClaimType ClaimType = 1;
 * @return {!proto.proto.ClaimContract.EnumClaimType}
 */
proto.proto.ClaimContract.prototype.getClaimtype = function() {
  return /** @type {!proto.proto.ClaimContract.EnumClaimType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.ClaimContract.EnumClaimType} value
 * @return {!proto.proto.ClaimContract} returns this
 */
proto.proto.ClaimContract.prototype.setClaimtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes ID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ClaimContract.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ID = 2;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.proto.ClaimContract.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes ID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.proto.ClaimContract.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.ClaimContract} returns this
 */
proto.proto.ClaimContract.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UnjailContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UnjailContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UnjailContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UnjailContract.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UnjailContract}
 */
proto.proto.UnjailContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UnjailContract;
  return proto.proto.UnjailContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UnjailContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UnjailContract}
 */
proto.proto.UnjailContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UnjailContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UnjailContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UnjailContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UnjailContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetAccountNameContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetAccountNameContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetAccountNameContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetAccountNameContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetAccountNameContract}
 */
proto.proto.SetAccountNameContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetAccountNameContract;
  return proto.proto.SetAccountNameContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetAccountNameContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetAccountNameContract}
 */
proto.proto.SetAccountNameContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetAccountNameContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetAccountNameContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetAccountNameContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetAccountNameContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes Name = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.SetAccountNameContract.prototype.getName = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Name = 1;
 * This is a type-conversion wrapper around `getName()`
 * @return {string}
 */
proto.proto.SetAccountNameContract.prototype.getName_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getName()));
};


/**
 * optional bytes Name = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {!Uint8Array}
 */
proto.proto.SetAccountNameContract.prototype.getName_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getName()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.SetAccountNameContract} returns this
 */
proto.proto.SetAccountNameContract.prototype.setName = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ProposalContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ProposalContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ProposalContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ProposalContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    parametersMap: (f = msg.getParametersMap()) ? f.toObject(includeInstance, undefined) : [],
    description: msg.getDescription_asB64(),
    epochsduration: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ProposalContract}
 */
proto.proto.ProposalContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ProposalContract;
  return proto.proto.ProposalContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ProposalContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ProposalContract}
 */
proto.proto.ProposalContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readBytes, null, 0, "");
         });
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEpochsduration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ProposalContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ProposalContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ProposalContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ProposalContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getDescription_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getEpochsduration();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * map<int32, bytes> Parameters = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!(string|Uint8Array)>}
 */
proto.proto.ProposalContract.prototype.getParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.ProposalContract} returns this
 */
proto.proto.ProposalContract.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
  return this;};


/**
 * optional bytes Description = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ProposalContract.prototype.getDescription = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Description = 2;
 * This is a type-conversion wrapper around `getDescription()`
 * @return {string}
 */
proto.proto.ProposalContract.prototype.getDescription_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDescription()));
};


/**
 * optional bytes Description = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDescription()`
 * @return {!Uint8Array}
 */
proto.proto.ProposalContract.prototype.getDescription_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDescription()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.ProposalContract} returns this
 */
proto.proto.ProposalContract.prototype.setDescription = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 EpochsDuration = 3;
 * @return {number}
 */
proto.proto.ProposalContract.prototype.getEpochsduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ProposalContract} returns this
 */
proto.proto.ProposalContract.prototype.setEpochsduration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.VoteContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.VoteContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.VoteContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.VoteContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposalid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.VoteContract}
 */
proto.proto.VoteContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.VoteContract;
  return proto.proto.VoteContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.VoteContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.VoteContract}
 */
proto.proto.VoteContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setProposalid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {!proto.proto.VoteContract.EnumVoteType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.VoteContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.VoteContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.VoteContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.VoteContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposalid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.VoteContract.EnumVoteType = {
  YES: 0,
  NO: 1
};

/**
 * optional uint64 ProposalID = 1;
 * @return {number}
 */
proto.proto.VoteContract.prototype.getProposalid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.VoteContract} returns this
 */
proto.proto.VoteContract.prototype.setProposalid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 Amount = 2;
 * @return {number}
 */
proto.proto.VoteContract.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.VoteContract} returns this
 */
proto.proto.VoteContract.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional EnumVoteType Type = 3;
 * @return {!proto.proto.VoteContract.EnumVoteType}
 */
proto.proto.VoteContract.prototype.getType = function() {
  return /** @type {!proto.proto.VoteContract.EnumVoteType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.proto.VoteContract.EnumVoteType} value
 * @return {!proto.proto.VoteContract} returns this
 */
proto.proto.VoteContract.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ConfigITOContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ConfigITOContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ConfigITOContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ConfigITOContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetid: msg.getAssetid_asB64(),
    receiveraddress: msg.getReceiveraddress_asB64(),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxamount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    packinfoMap: (f = msg.getPackinfoMap()) ? f.toObject(includeInstance, proto.proto.PackInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ConfigITOContract}
 */
proto.proto.ConfigITOContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ConfigITOContract;
  return proto.proto.ConfigITOContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ConfigITOContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ConfigITOContract}
 */
proto.proto.ConfigITOContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiveraddress(value);
      break;
    case 3:
      var value = /** @type {!proto.proto.ConfigITOContract.EnumITOStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxamount(value);
      break;
    case 5:
      var value = msg.getPackinfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.PackInfo.deserializeBinaryFromReader, "", new proto.proto.PackInfo());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ConfigITOContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ConfigITOContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ConfigITOContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ConfigITOContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getReceiveraddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMaxamount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getPackinfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.PackInfo.serializeBinaryToWriter);
  }
};


/**
 * @enum {number}
 */
proto.proto.ConfigITOContract.EnumITOStatus = {
  DEFAULTITO: 0,
  ACTIVEITO: 1,
  PAUSEDITO: 2
};

/**
 * optional bytes AssetID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ConfigITOContract.prototype.getAssetid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes AssetID = 1;
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {string}
 */
proto.proto.ConfigITOContract.prototype.getAssetid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetid()));
};


/**
 * optional bytes AssetID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {!Uint8Array}
 */
proto.proto.ConfigITOContract.prototype.getAssetid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.ConfigITOContract} returns this
 */
proto.proto.ConfigITOContract.prototype.setAssetid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes ReceiverAddress = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ConfigITOContract.prototype.getReceiveraddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ReceiverAddress = 2;
 * This is a type-conversion wrapper around `getReceiveraddress()`
 * @return {string}
 */
proto.proto.ConfigITOContract.prototype.getReceiveraddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiveraddress()));
};


/**
 * optional bytes ReceiverAddress = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiveraddress()`
 * @return {!Uint8Array}
 */
proto.proto.ConfigITOContract.prototype.getReceiveraddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiveraddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.ConfigITOContract} returns this
 */
proto.proto.ConfigITOContract.prototype.setReceiveraddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional EnumITOStatus Status = 3;
 * @return {!proto.proto.ConfigITOContract.EnumITOStatus}
 */
proto.proto.ConfigITOContract.prototype.getStatus = function() {
  return /** @type {!proto.proto.ConfigITOContract.EnumITOStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.proto.ConfigITOContract.EnumITOStatus} value
 * @return {!proto.proto.ConfigITOContract} returns this
 */
proto.proto.ConfigITOContract.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int64 MaxAmount = 4;
 * @return {number}
 */
proto.proto.ConfigITOContract.prototype.getMaxamount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ConfigITOContract} returns this
 */
proto.proto.ConfigITOContract.prototype.setMaxamount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * map<string, PackInfo> PackInfo = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.PackInfo>}
 */
proto.proto.ConfigITOContract.prototype.getPackinfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.PackInfo>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.proto.PackInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.ConfigITOContract} returns this
 */
proto.proto.ConfigITOContract.prototype.clearPackinfoMap = function() {
  this.getPackinfoMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetITOPricesContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetITOPricesContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetITOPricesContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetITOPricesContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetid: msg.getAssetid_asB64(),
    packinfoMap: (f = msg.getPackinfoMap()) ? f.toObject(includeInstance, proto.proto.PackInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetITOPricesContract}
 */
proto.proto.SetITOPricesContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetITOPricesContract;
  return proto.proto.SetITOPricesContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetITOPricesContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetITOPricesContract}
 */
proto.proto.SetITOPricesContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetid(value);
      break;
    case 2:
      var value = msg.getPackinfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.PackInfo.deserializeBinaryFromReader, "", new proto.proto.PackInfo());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetITOPricesContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetITOPricesContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetITOPricesContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetITOPricesContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPackinfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.PackInfo.serializeBinaryToWriter);
  }
};


/**
 * optional bytes AssetID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.SetITOPricesContract.prototype.getAssetid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes AssetID = 1;
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {string}
 */
proto.proto.SetITOPricesContract.prototype.getAssetid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetid()));
};


/**
 * optional bytes AssetID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {!Uint8Array}
 */
proto.proto.SetITOPricesContract.prototype.getAssetid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.SetITOPricesContract} returns this
 */
proto.proto.SetITOPricesContract.prototype.setAssetid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * map<string, PackInfo> PackInfo = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.PackInfo>}
 */
proto.proto.SetITOPricesContract.prototype.getPackinfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.PackInfo>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.proto.PackInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.SetITOPricesContract} returns this
 */
proto.proto.SetITOPricesContract.prototype.clearPackinfoMap = function() {
  this.getPackinfoMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.PackInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PackInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PackInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PackInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PackInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    packsList: jspb.Message.toObjectList(msg.getPacksList(),
    proto.proto.PackItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PackInfo}
 */
proto.proto.PackInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PackInfo;
  return proto.proto.PackInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PackInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PackInfo}
 */
proto.proto.PackInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.PackItem;
      reader.readMessage(value,proto.proto.PackItem.deserializeBinaryFromReader);
      msg.addPacks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PackInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PackInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PackInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PackInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.PackItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PackItem Packs = 1;
 * @return {!Array<!proto.proto.PackItem>}
 */
proto.proto.PackInfo.prototype.getPacksList = function() {
  return /** @type{!Array<!proto.proto.PackItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.PackItem, 1));
};


/**
 * @param {!Array<!proto.proto.PackItem>} value
 * @return {!proto.proto.PackInfo} returns this
*/
proto.proto.PackInfo.prototype.setPacksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.PackItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.PackItem}
 */
proto.proto.PackInfo.prototype.addPacks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.PackItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.PackInfo} returns this
 */
proto.proto.PackInfo.prototype.clearPacksList = function() {
  return this.setPacksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PackItem.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PackItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PackItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PackItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    price: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PackItem}
 */
proto.proto.PackItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PackItem;
  return proto.proto.PackItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PackItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PackItem}
 */
proto.proto.PackItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PackItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PackItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PackItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PackItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 Amount = 1;
 * @return {number}
 */
proto.proto.PackItem.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.PackItem} returns this
 */
proto.proto.PackItem.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 Price = 2;
 * @return {number}
 */
proto.proto.PackItem.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.PackItem} returns this
 */
proto.proto.PackItem.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.BuyContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.BuyContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.BuyContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.BuyContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    buytype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: msg.getId_asB64(),
    currencyid: msg.getCurrencyid_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.BuyContract}
 */
proto.proto.BuyContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.BuyContract;
  return proto.proto.BuyContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.BuyContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.BuyContract}
 */
proto.proto.BuyContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.BuyContract.EnumBuyType} */ (reader.readEnum());
      msg.setBuytype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCurrencyid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.BuyContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.BuyContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.BuyContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.BuyContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBuytype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCurrencyid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.BuyContract.EnumBuyType = {
  ITOBUY: 0,
  MARKETBUY: 1
};

/**
 * optional EnumBuyType BuyType = 1;
 * @return {!proto.proto.BuyContract.EnumBuyType}
 */
proto.proto.BuyContract.prototype.getBuytype = function() {
  return /** @type {!proto.proto.BuyContract.EnumBuyType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.BuyContract.EnumBuyType} value
 * @return {!proto.proto.BuyContract} returns this
 */
proto.proto.BuyContract.prototype.setBuytype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes ID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.BuyContract.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ID = 2;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.proto.BuyContract.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes ID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.proto.BuyContract.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.BuyContract} returns this
 */
proto.proto.BuyContract.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes CurrencyID = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.BuyContract.prototype.getCurrencyid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes CurrencyID = 3;
 * This is a type-conversion wrapper around `getCurrencyid()`
 * @return {string}
 */
proto.proto.BuyContract.prototype.getCurrencyid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCurrencyid()));
};


/**
 * optional bytes CurrencyID = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCurrencyid()`
 * @return {!Uint8Array}
 */
proto.proto.BuyContract.prototype.getCurrencyid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCurrencyid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.BuyContract} returns this
 */
proto.proto.BuyContract.prototype.setCurrencyid = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int64 Amount = 4;
 * @return {number}
 */
proto.proto.BuyContract.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.BuyContract} returns this
 */
proto.proto.BuyContract.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SellContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SellContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SellContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SellContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    markettype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    marketplaceid: msg.getMarketplaceid_asB64(),
    assetid: msg.getAssetid_asB64(),
    currencyid: msg.getCurrencyid_asB64(),
    price: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reserveprice: jspb.Message.getFieldWithDefault(msg, 6, 0),
    endtime: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SellContract}
 */
proto.proto.SellContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SellContract;
  return proto.proto.SellContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SellContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SellContract}
 */
proto.proto.SellContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.SellContract.EnumMarketType} */ (reader.readEnum());
      msg.setMarkettype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMarketplaceid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetid(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCurrencyid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReserveprice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SellContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SellContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SellContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SellContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarkettype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMarketplaceid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAssetid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getCurrencyid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getReserveprice();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getEndtime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.SellContract.EnumMarketType = {
  BUYITNOWMARKET: 0,
  AUCTIONMARKET: 1
};

/**
 * optional EnumMarketType MarketType = 1;
 * @return {!proto.proto.SellContract.EnumMarketType}
 */
proto.proto.SellContract.prototype.getMarkettype = function() {
  return /** @type {!proto.proto.SellContract.EnumMarketType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.SellContract.EnumMarketType} value
 * @return {!proto.proto.SellContract} returns this
 */
proto.proto.SellContract.prototype.setMarkettype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes MarketplaceID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.SellContract.prototype.getMarketplaceid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes MarketplaceID = 2;
 * This is a type-conversion wrapper around `getMarketplaceid()`
 * @return {string}
 */
proto.proto.SellContract.prototype.getMarketplaceid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMarketplaceid()));
};


/**
 * optional bytes MarketplaceID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMarketplaceid()`
 * @return {!Uint8Array}
 */
proto.proto.SellContract.prototype.getMarketplaceid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMarketplaceid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.SellContract} returns this
 */
proto.proto.SellContract.prototype.setMarketplaceid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes AssetID = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.SellContract.prototype.getAssetid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes AssetID = 3;
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {string}
 */
proto.proto.SellContract.prototype.getAssetid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetid()));
};


/**
 * optional bytes AssetID = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetid()`
 * @return {!Uint8Array}
 */
proto.proto.SellContract.prototype.getAssetid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.SellContract} returns this
 */
proto.proto.SellContract.prototype.setAssetid = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes CurrencyID = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.SellContract.prototype.getCurrencyid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes CurrencyID = 4;
 * This is a type-conversion wrapper around `getCurrencyid()`
 * @return {string}
 */
proto.proto.SellContract.prototype.getCurrencyid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCurrencyid()));
};


/**
 * optional bytes CurrencyID = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCurrencyid()`
 * @return {!Uint8Array}
 */
proto.proto.SellContract.prototype.getCurrencyid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCurrencyid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.SellContract} returns this
 */
proto.proto.SellContract.prototype.setCurrencyid = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int64 Price = 5;
 * @return {number}
 */
proto.proto.SellContract.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SellContract} returns this
 */
proto.proto.SellContract.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 ReservePrice = 6;
 * @return {number}
 */
proto.proto.SellContract.prototype.getReserveprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SellContract} returns this
 */
proto.proto.SellContract.prototype.setReserveprice = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 EndTime = 7;
 * @return {number}
 */
proto.proto.SellContract.prototype.getEndtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SellContract} returns this
 */
proto.proto.SellContract.prototype.setEndtime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CancelMarketOrderContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CancelMarketOrderContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CancelMarketOrderContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CancelMarketOrderContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderid: msg.getOrderid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CancelMarketOrderContract}
 */
proto.proto.CancelMarketOrderContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CancelMarketOrderContract;
  return proto.proto.CancelMarketOrderContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CancelMarketOrderContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CancelMarketOrderContract}
 */
proto.proto.CancelMarketOrderContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrderid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CancelMarketOrderContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CancelMarketOrderContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CancelMarketOrderContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CancelMarketOrderContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes OrderID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.CancelMarketOrderContract.prototype.getOrderid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes OrderID = 1;
 * This is a type-conversion wrapper around `getOrderid()`
 * @return {string}
 */
proto.proto.CancelMarketOrderContract.prototype.getOrderid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrderid()));
};


/**
 * optional bytes OrderID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrderid()`
 * @return {!Uint8Array}
 */
proto.proto.CancelMarketOrderContract.prototype.getOrderid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrderid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.CancelMarketOrderContract} returns this
 */
proto.proto.CancelMarketOrderContract.prototype.setOrderid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CreateMarketplaceContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CreateMarketplaceContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CreateMarketplaceContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CreateMarketplaceContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName_asB64(),
    referraladdress: msg.getReferraladdress_asB64(),
    referralpercentage: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CreateMarketplaceContract}
 */
proto.proto.CreateMarketplaceContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CreateMarketplaceContract;
  return proto.proto.CreateMarketplaceContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CreateMarketplaceContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CreateMarketplaceContract}
 */
proto.proto.CreateMarketplaceContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReferraladdress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReferralpercentage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CreateMarketplaceContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CreateMarketplaceContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CreateMarketplaceContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CreateMarketplaceContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getReferraladdress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getReferralpercentage();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bytes Name = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.CreateMarketplaceContract.prototype.getName = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Name = 1;
 * This is a type-conversion wrapper around `getName()`
 * @return {string}
 */
proto.proto.CreateMarketplaceContract.prototype.getName_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getName()));
};


/**
 * optional bytes Name = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {!Uint8Array}
 */
proto.proto.CreateMarketplaceContract.prototype.getName_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getName()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.CreateMarketplaceContract} returns this
 */
proto.proto.CreateMarketplaceContract.prototype.setName = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes ReferralAddress = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.CreateMarketplaceContract.prototype.getReferraladdress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ReferralAddress = 2;
 * This is a type-conversion wrapper around `getReferraladdress()`
 * @return {string}
 */
proto.proto.CreateMarketplaceContract.prototype.getReferraladdress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReferraladdress()));
};


/**
 * optional bytes ReferralAddress = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReferraladdress()`
 * @return {!Uint8Array}
 */
proto.proto.CreateMarketplaceContract.prototype.getReferraladdress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReferraladdress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.CreateMarketplaceContract} returns this
 */
proto.proto.CreateMarketplaceContract.prototype.setReferraladdress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 ReferralPercentage = 3;
 * @return {number}
 */
proto.proto.CreateMarketplaceContract.prototype.getReferralpercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.CreateMarketplaceContract} returns this
 */
proto.proto.CreateMarketplaceContract.prototype.setReferralpercentage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ConfigMarketplaceContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ConfigMarketplaceContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ConfigMarketplaceContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ConfigMarketplaceContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketplaceid: msg.getMarketplaceid_asB64(),
    name: msg.getName_asB64(),
    referraladdress: msg.getReferraladdress_asB64(),
    referralpercentage: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ConfigMarketplaceContract}
 */
proto.proto.ConfigMarketplaceContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ConfigMarketplaceContract;
  return proto.proto.ConfigMarketplaceContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ConfigMarketplaceContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ConfigMarketplaceContract}
 */
proto.proto.ConfigMarketplaceContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMarketplaceid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReferraladdress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReferralpercentage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ConfigMarketplaceContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ConfigMarketplaceContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ConfigMarketplaceContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ConfigMarketplaceContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketplaceid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getReferraladdress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getReferralpercentage();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional bytes MarketplaceID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ConfigMarketplaceContract.prototype.getMarketplaceid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes MarketplaceID = 1;
 * This is a type-conversion wrapper around `getMarketplaceid()`
 * @return {string}
 */
proto.proto.ConfigMarketplaceContract.prototype.getMarketplaceid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMarketplaceid()));
};


/**
 * optional bytes MarketplaceID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMarketplaceid()`
 * @return {!Uint8Array}
 */
proto.proto.ConfigMarketplaceContract.prototype.getMarketplaceid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMarketplaceid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.ConfigMarketplaceContract} returns this
 */
proto.proto.ConfigMarketplaceContract.prototype.setMarketplaceid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes Name = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ConfigMarketplaceContract.prototype.getName = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Name = 2;
 * This is a type-conversion wrapper around `getName()`
 * @return {string}
 */
proto.proto.ConfigMarketplaceContract.prototype.getName_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getName()));
};


/**
 * optional bytes Name = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {!Uint8Array}
 */
proto.proto.ConfigMarketplaceContract.prototype.getName_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getName()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.ConfigMarketplaceContract} returns this
 */
proto.proto.ConfigMarketplaceContract.prototype.setName = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes ReferralAddress = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ConfigMarketplaceContract.prototype.getReferraladdress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ReferralAddress = 3;
 * This is a type-conversion wrapper around `getReferraladdress()`
 * @return {string}
 */
proto.proto.ConfigMarketplaceContract.prototype.getReferraladdress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReferraladdress()));
};


/**
 * optional bytes ReferralAddress = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReferraladdress()`
 * @return {!Uint8Array}
 */
proto.proto.ConfigMarketplaceContract.prototype.getReferraladdress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReferraladdress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.ConfigMarketplaceContract} returns this
 */
proto.proto.ConfigMarketplaceContract.prototype.setReferraladdress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 ReferralPercentage = 4;
 * @return {number}
 */
proto.proto.ConfigMarketplaceContract.prototype.getReferralpercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ConfigMarketplaceContract} returns this
 */
proto.proto.ConfigMarketplaceContract.prototype.setReferralpercentage = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AccKey.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AccKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AccKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AccKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    weight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AccKey}
 */
proto.proto.AccKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AccKey;
  return proto.proto.AccKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AccKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AccKey}
 */
proto.proto.AccKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AccKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AccKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AccKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AccKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.AccKey.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.proto.AccKey.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.proto.AccKey.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.AccKey} returns this
 */
proto.proto.AccKey.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 weight = 2;
 * @return {number}
 */
proto.proto.AccKey.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.AccKey} returns this
 */
proto.proto.AccKey.prototype.setWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.AccPermission.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AccPermission.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AccPermission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AccPermission} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AccPermission.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    permissionname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    threshold: jspb.Message.getFieldWithDefault(msg, 4, 0),
    operations: msg.getOperations_asB64(),
    signersList: jspb.Message.toObjectList(msg.getSignersList(),
    proto.proto.AccKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AccPermission}
 */
proto.proto.AccPermission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AccPermission;
  return proto.proto.AccPermission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AccPermission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AccPermission}
 */
proto.proto.AccPermission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.proto.AccPermission.AccPermissionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPermissionname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setThreshold(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOperations(value);
      break;
    case 6:
      var value = new proto.proto.AccKey;
      reader.readMessage(value,proto.proto.AccKey.deserializeBinaryFromReader);
      msg.addSigners(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AccPermission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AccPermission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AccPermission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AccPermission.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPermissionname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getThreshold();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getOperations_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.proto.AccKey.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.AccPermission.AccPermissionType = {
  OWNER: 0,
  USER: 1
};

/**
 * optional AccPermissionType Type = 2;
 * @return {!proto.proto.AccPermission.AccPermissionType}
 */
proto.proto.AccPermission.prototype.getType = function() {
  return /** @type {!proto.proto.AccPermission.AccPermissionType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.proto.AccPermission.AccPermissionType} value
 * @return {!proto.proto.AccPermission} returns this
 */
proto.proto.AccPermission.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string PermissionName = 3;
 * @return {string}
 */
proto.proto.AccPermission.prototype.getPermissionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.AccPermission} returns this
 */
proto.proto.AccPermission.prototype.setPermissionname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 Threshold = 4;
 * @return {number}
 */
proto.proto.AccPermission.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.AccPermission} returns this
 */
proto.proto.AccPermission.prototype.setThreshold = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes Operations = 5;
 * @return {!(string|Uint8Array)}
 */
proto.proto.AccPermission.prototype.getOperations = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes Operations = 5;
 * This is a type-conversion wrapper around `getOperations()`
 * @return {string}
 */
proto.proto.AccPermission.prototype.getOperations_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOperations()));
};


/**
 * optional bytes Operations = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOperations()`
 * @return {!Uint8Array}
 */
proto.proto.AccPermission.prototype.getOperations_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOperations()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.AccPermission} returns this
 */
proto.proto.AccPermission.prototype.setOperations = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * repeated AccKey Signers = 6;
 * @return {!Array<!proto.proto.AccKey>}
 */
proto.proto.AccPermission.prototype.getSignersList = function() {
  return /** @type{!Array<!proto.proto.AccKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.AccKey, 6));
};


/**
 * @param {!Array<!proto.proto.AccKey>} value
 * @return {!proto.proto.AccPermission} returns this
*/
proto.proto.AccPermission.prototype.setSignersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.proto.AccKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AccKey}
 */
proto.proto.AccPermission.prototype.addSigners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.proto.AccKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.AccPermission} returns this
 */
proto.proto.AccPermission.prototype.clearSignersList = function() {
  return this.setSignersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.UpdateAccountPermissionContract.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UpdateAccountPermissionContract.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UpdateAccountPermissionContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UpdateAccountPermissionContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateAccountPermissionContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    permissionsList: jspb.Message.toObjectList(msg.getPermissionsList(),
    proto.proto.AccPermission.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UpdateAccountPermissionContract}
 */
proto.proto.UpdateAccountPermissionContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UpdateAccountPermissionContract;
  return proto.proto.UpdateAccountPermissionContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UpdateAccountPermissionContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UpdateAccountPermissionContract}
 */
proto.proto.UpdateAccountPermissionContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 8:
      var value = new proto.proto.AccPermission;
      reader.readMessage(value,proto.proto.AccPermission.deserializeBinaryFromReader);
      msg.addPermissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UpdateAccountPermissionContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UpdateAccountPermissionContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UpdateAccountPermissionContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateAccountPermissionContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPermissionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.proto.AccPermission.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AccPermission Permissions = 8;
 * @return {!Array<!proto.proto.AccPermission>}
 */
proto.proto.UpdateAccountPermissionContract.prototype.getPermissionsList = function() {
  return /** @type{!Array<!proto.proto.AccPermission>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.AccPermission, 8));
};


/**
 * @param {!Array<!proto.proto.AccPermission>} value
 * @return {!proto.proto.UpdateAccountPermissionContract} returns this
*/
proto.proto.UpdateAccountPermissionContract.prototype.setPermissionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.proto.AccPermission=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AccPermission}
 */
proto.proto.UpdateAccountPermissionContract.prototype.addPermissions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.proto.AccPermission, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.UpdateAccountPermissionContract} returns this
 */
proto.proto.UpdateAccountPermissionContract.prototype.clearPermissionsList = function() {
  return this.setPermissionsList([]);
};


goog.object.extend(exports, proto.proto);
